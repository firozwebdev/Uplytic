import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

export class PDFExporter {
  constructor() {
    this.options = {
      filename: 'api-monitoring-report.pdf',
    };
  }

  async exportApiReport(api, logs, insights) {
    const doc = new jsPDF({ unit: 'mm', format: 'a4', orientation: 'portrait' });
    const margin = 15;
    let y = margin;

    // Title
    doc.setFontSize(22);
    doc.setTextColor('#2563eb');
    doc.text('Uplytic API Health Monitoring Report', margin, y);
    y += 10;
    doc.setFontSize(12);
    doc.setTextColor('#333');
    doc.text(`API: ${api.name || ''}`, margin, y);
    y += 7;
    doc.text(`URL: ${api.url || ''}`, margin, y);
    y += 7;
    doc.text(`Generated: ${new Date().toLocaleString()}`, margin, y);
    y += 10;

    // Key Metrics
    doc.setFontSize(14);
    doc.setTextColor('#1f2937');
    doc.text('Key Metrics', margin, y);
    y += 7;
    const stats = {
      uptime: 0,
      avgLatency: 0,
      totalChecks: logs.length,
      status: logs.length > 0 ? logs[0].status_code : 0
    };
    let clientErrors = 0, serverErrors = 0, networkErrors = 0;
    if (logs.length > 0) {
      const successfulChecks = logs.filter(log => log.status_code < 400).length;
      stats.uptime = Math.round((successfulChecks / logs.length) * 100 * 100) / 100;
      stats.avgLatency = Math.round(logs.reduce((sum, log) => sum + log.latency_ms, 0) / logs.length);
      clientErrors = logs.filter(log => log.status_code >= 400 && log.status_code < 500).length;
      serverErrors = logs.filter(log => log.status_code >= 500).length;
      networkErrors = logs.filter(log => log.status_code === 0).length;
    }
    doc.setFontSize(11);
    doc.text(`Uptime: ${stats.uptime}%`, margin, y);
    y += 6;
    doc.text(`Avg Latency: ${stats.avgLatency}ms`, margin, y);
    y += 6;
    doc.text(`Total Checks: ${stats.totalChecks}`, margin, y);
    y += 6;
    doc.text(`Status: ${stats.status < 400 ? 'Operational' : 'Issues Detected'}`, margin, y);
    y += 6;
    doc.text(`4xx Errors: ${clientErrors}   5xx Errors: ${serverErrors}   Network Errors: ${networkErrors}`, margin, y);
    y += 10;

    // Cost Impact (placeholder)
    doc.setFontSize(14);
    doc.setTextColor('#92400e');
    doc.text('Cost Impact (24h)', margin, y);
    doc.setFontSize(11);
    doc.setTextColor('#333');
    y += 7;
    doc.text('Total Loss: $0.00   Downtime: 0 min   Cost Rate: $0/hr', margin, y); // Placeholder, replace with real data if available
    y += 10;

    // Recent Activity Table
    doc.setFontSize(14);
    doc.setTextColor('#1f2937');
    doc.text('Recent Activity (Last 10 Checks)', margin, y);
    y += 4;
    autoTable(doc, {
      startY: y,
      head: [['Time', 'Status', 'Response Time (ms)']],
      body: logs.slice(0, 10).map(log => [
        new Date(log.created_at).toLocaleString(),
        log.status_code,
        log.latency_ms
      ]),
      margin: { left: margin, right: margin },
      styles: { fontSize: 10 },
      headStyles: { fillColor: [37, 99, 235] },
    });
    y = doc.lastAutoTable.finalY + 10;

    // AI Insights (if any)
    if (insights && (insights.summary || (insights.insights && insights.insights.length > 0))) {
      doc.setFontSize(14);
      doc.setTextColor('#1f2937');
      doc.text('AI Insights & Recommendations', margin, y);
      y += 7;
      doc.setFontSize(11);
      doc.setTextColor('#333');
      if (insights.summary) {
        doc.text(insights.summary, margin, y);
        y += 7;
      }
      if (insights.insights && insights.insights.length > 0) {
        insights.insights.forEach(insight => {
          doc.setFont(undefined, 'bold');
          doc.text(insight.title, margin, y);
          y += 5;
          doc.setFont(undefined, 'normal');
          doc.text(insight.message, margin, y);
          y += 5;
          doc.setTextColor('#059669');
          doc.text(`ðŸ’¡ ${insight.recommendation}`, margin, y);
          doc.setTextColor('#333');
          y += 7;
        });
      }
    }

    // Footer: Add to every page
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor('#888');
      doc.text('Generated by Uplytic - Powered by Foxgit', margin, 287, { align: 'left' });
      doc.text(`Page ${i} of ${pageCount}`, 200, 287, { align: 'right' });
    }

    // Save the PDF
    doc.save(this.options.filename);
  }
}

export const pdfExporter = new PDFExporter(); 